import React, { useState } from 'react';
import { Play, Shield, Zap, Target, Mail, Flame, Star, Trophy } from 'lucide-react';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent } from "@/components/ui/card";
import { Label } from "@/components/ui/label";

export default function StartScreen({ onStart }) {
  const [playerEmail, setPlayerEmail] = useState('');
  const [selectedDifficulty, setSelectedDifficulty] = useState('medium');
  const [isValidEmail, setIsValidEmail] = useState(false);

  const validateEmail = (email) => {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  };

  const handleEmailChange = (e) => {
    const email = e.target.value;
    setPlayerEmail(email);
    setIsValidEmail(validateEmail(email));
  };

  const handleStart = () => {
    if (isValidEmail) {
      onStart(playerEmail, selectedDifficulty);
    }
  };

  const difficulties = [
    {
      id: 'easy',
      name: 'Easy',
      icon: Star,
      description: 'Slower pace, clear distinctions',
      color: 'bg-green-900/30 border-green-400/20 text-green-400'
    },
    {
      id: 'medium',
      name: 'Medium',
      icon: Shield,
      description: 'Balanced challenge',
      color: 'bg-blue-900/30 border-blue-400/20 text-blue-400'
    },
    {
      id: 'hard',
      name: 'Hard',
      icon: Flame,
      description: 'Fast pace, deceptive content, expert level',
      color: 'bg-red-900/30 border-red-400/20 text-red-400'
    }
  ];

  return (
    <div className="fixed inset-0 z-50 bg-gradient-to-br from-gray-900 via-blue-900 to-cyan-900 flex items-center justify-center p-2 sm:p-4">
      <Card className="w-full max-w-2xl bg-gray-900/95 border-cyan-400/20 shadow-2xl shadow-cyan-400/10 mx-2 max-h-[95vh] overflow-y-auto">
        <CardContent className="p-4 sm:p-6 lg:p-8 text-center">
          {/* Header */}
          <div className="mb-6 sm:mb-8">
            <div className="w-16 h-16 sm:w-20 lg:w-24 sm:h-20 lg:h-24 bg-gradient-to-r from-cyan-400 to-blue-500 rounded-full flex items-center justify-center mx-auto mb-4 sm:mb-6 animate-pulse">
              <Shield className="w-8 h-8 sm:w-10 lg:w-12 sm:h-10 lg:h-12 text-white" />
            </div>
            <h1 className="text-2xl sm:text-3xl lg:text-4xl font-bold text-white mb-2">Catch the Leak</h1>
            <p className="text-lg sm:text-xl text-cyan-300 font-medium">by Polygraf AI</p>
          </div>

          {/* Game Description */}
          <div className="mb-6 sm:mb-8 text-left">
            <h3 className="text-lg sm:text-xl font-bold text-white mb-3 sm:mb-4 text-center">ðŸŽ® How to Play</h3>
            <div className="space-y-2 sm:space-y-3 text-sm sm:text-base text-gray-300">
              <div className="flex items-start gap-3">
                <div className="w-2 h-2 bg-red-400 rounded-full animate-pulse mt-2 flex-shrink-0"></div>
                <p><span className="text-red-400 font-medium">Catch AI-generated risky content</span> falling from the sky</p>
              </div>
              <div className="flex items-start gap-3">
                <div className="w-2 h-2 bg-blue-400 rounded-full animate-pulse mt-2 flex-shrink-0"></div>
                <p><span className="text-blue-400 font-medium">Avoid human-written safe content</span> to maintain your score</p>
              </div>
              <div className="flex items-start gap-3">
                <div className="w-2 h-2 bg-yellow-400 rounded-full animate-pulse mt-2 flex-shrink-0"></div>
                <p>You have <span className="text-yellow-400 font-medium">30 seconds</span> to catch as many threats as possible</p>
              </div>
            </div>
          </div>

          {/* Difficulty Selection */}
          <div className="mb-6 sm:mb-8">
            <h3 className="text-lg font-bold text-white mb-4">Choose Your Challenge</h3>
            <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
              {difficulties.map((difficulty) => {
                const IconComponent = difficulty.icon;
                const isSelected = selectedDifficulty === difficulty.id;
                return (
                  <button
                    key={difficulty.id}
                    onClick={() => setSelectedDifficulty(difficulty.id)}
                    className={`
                      p-4 rounded-lg border-2 transition-all duration-200 hover:scale-105 active:scale-95
                      ${isSelected 
                        ? difficulty.color + ' border-opacity-100 shadow-lg' 
                        : 'bg-gray-800/30 border-gray-600/20 text-gray-300 hover:bg-gray-700/30'
                      }
                    `}
                  >
                    <div className="flex flex-col items-center gap-2">
                      <IconComponent className={`w-6 h-6 ${isSelected ? '' : 'text-gray-400'}`} />
                      <div className="text-sm font-bold">{difficulty.name}</div>
                      <div className="text-xs opacity-80">{difficulty.description}</div>
                    </div>
                  </button>
                );
              })}
            </div>
          </div>

          {/* Scoring Info */}
          <div className="grid grid-cols-3 gap-2 sm:gap-4 mb-6 sm:mb-8">
            <div className="bg-green-900/30 border border-green-400/20 rounded-lg p-2 sm:p-4">
              <Zap className="w-6 h-6 sm:w-8 sm:h-8 text-green-400 mx-auto mb-1 sm:mb-2" />
              <div className="text-sm sm:text-lg font-bold text-green-400">+100</div>
              <div className="text-xs text-gray-300">Correct</div>
            </div>
            <div className="bg-red-900/30 border border-red-400/20 rounded-lg p-2 sm:p-4">
              <Target className="w-6 h-6 sm:w-8 sm:h-8 text-red-400 mx-auto mb-1 sm:mb-2" />
              <div className="text-sm sm:text-lg font-bold text-red-400">-50</div>
              <div className="text-xs text-gray-300">Wrong</div>
            </div>
            <div className="bg-orange-900/30 border border-orange-400/20 rounded-lg p-2 sm:p-4">
              <Shield className="w-6 h-6 sm:w-8 sm:h-8 text-orange-400 mx-auto mb-1 sm:mb-2" />
              <div className="text-sm sm:text-lg font-bold text-orange-400">-25</div>
              <div className="text-xs text-gray-300">Missed</div>
            </div>
          </div>

          {/* Email Input */}
          <div className="mb-6 sm:mb-8 text-left">
            <Label htmlFor="email" className="text-white font-medium mb-2 block text-sm sm:text-base">
              Email Address (Required)
            </Label>
            <div className="relative">
              <Mail className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 sm:w-5 sm:h-5 text-gray-400" />
              <Input
                id="email"
                type="email"
                placeholder="Enter your email address"
                value={playerEmail}
                onChange={handleEmailChange}
                className={`bg-gray-800/50 border text-white placeholder-gray-400 text-sm sm:text-lg py-3 sm:py-3 pl-10 sm:pl-12 ${
                  playerEmail && !isValidEmail 
                    ? 'border-red-500 focus:border-red-500' 
                    : isValidEmail 
                      ? 'border-green-500 focus:border-green-500'
                      : 'border-gray-600 focus:border-cyan-400'
                }`}
                required
              />
            </div>
            {playerEmail && !isValidEmail && (
              <p className="text-red-400 text-xs sm:text-sm mt-2">Please enter a valid email address</p>
            )}
            {isValidEmail && (
              <p className="text-green-400 text-xs sm:text-sm mt-2">âœ“ Valid email address</p>
            )}
          </div>

          {/* Start Button */}
          <Button
            onClick={handleStart}
            disabled={!isValidEmail}
            className={`font-bold text-base sm:text-lg px-8 sm:px-12 py-3 sm:py-4 rounded-xl transform hover:scale-105 active:scale-95 transition-all duration-200 shadow-lg w-full sm:w-auto min-h-[48px] ${
              isValidEmail 
                ? 'bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white shadow-cyan-400/20' 
                : 'bg-gray-600 text-gray-400 cursor-not-allowed'
            }`}
          >
            <Play className="w-5 h-5 sm:w-6 sm:h-6 mr-2 sm:mr-3" />
            Start Game - {difficulties.find(d => d.id === selectedDifficulty)?.name}
          </Button>

          {/* Footer */}
          <div className="mt-6 sm:mt-8 pt-4 sm:pt-6 border-t border-gray-700">
            <p className="text-xs sm:text-sm text-gray-400">
              Experience next-generation cybersecurity with <span className="text-cyan-400 font-semibold">Polygraf AI</span>
            </p>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}